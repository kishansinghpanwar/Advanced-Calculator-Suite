name: 🧪 Automated Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🏗️ Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🧪 Run Unit Tests with Coverage
      run: ./gradlew testDebugUnitTest jacocoTestReport
      
    - name: 📊 Upload Unit Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: app/build/reports/tests/
        
    - name: 📊 Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: app/build/reports/jacoco/

  build-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🤖 Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: 🏗️ Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🏗️ Build Project
      run: ./gradlew assembleDebug assembleDebugAndroidTest

  notify:
    runs-on: ubuntu-latest
    needs: [unit-tests, build-tests]
    if: always()
    
    steps:
    - name: 📢 Notify Test Results
      run: |
        if [ "${{ needs.unit-tests.result }}" == "success" ] && [ "${{ needs.build-tests.result }}" == "success" ]; then
          echo "✅ All tests passed! 🎉"
          echo "📊 Coverage reports generated"
          echo "🏗️ Build successful"
        else
          echo "❌ Some tests failed! 🔍"
          echo "Unit tests: ${{ needs.unit-tests.result }}"
          echo "Build tests: ${{ needs.build-tests.result }}"
          exit 1
        fi
